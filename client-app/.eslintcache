[{"/Volumes/ExtendedDrive/IDEWorkspace/VisualStudioCode/utuCodingChallenge/client-app/src/index.tsx":"1","/Volumes/ExtendedDrive/IDEWorkspace/VisualStudioCode/utuCodingChallenge/client-app/src/reportWebVitals.ts":"2","/Volumes/ExtendedDrive/IDEWorkspace/VisualStudioCode/utuCodingChallenge/client-app/src/App.tsx":"3","/Volumes/ExtendedDrive/IDEWorkspace/VisualStudioCode/utuCodingChallenge/client-app/src/features/CryptoList.tsx":"4"},{"size":621,"mtime":1612311333000,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":1612310831000,"results":"7","hashOfConfig":"6"},{"size":677,"mtime":1612314549000,"results":"8","hashOfConfig":"6"},{"size":2973,"mtime":1612317975000,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"9gzrpa",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"/Volumes/ExtendedDrive/IDEWorkspace/VisualStudioCode/utuCodingChallenge/client-app/src/index.tsx",[],["21","22"],"/Volumes/ExtendedDrive/IDEWorkspace/VisualStudioCode/utuCodingChallenge/client-app/src/reportWebVitals.ts",[],"/Volumes/ExtendedDrive/IDEWorkspace/VisualStudioCode/utuCodingChallenge/client-app/src/App.tsx",["23"],"import { Container, LinearProgress } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useQuery } from \"react-query\";\nimport \"./App.css\";\nimport { CryptoType } from \"./CryptoType\";\nimport CryptoList from \"./features/CryptoList\";\n\nconst getCryptos = async (): Promise<CryptoType[]> =>\n  await await (await fetch(\"http://localhost:5000/api/crypto\")).json();\n\nconst App = () => {\n  const { data, isLoading, error } = useQuery<CryptoType[]>(\n    \"crypto\",\n    getCryptos\n  );\n\n  console.log(data);\n\n  if (isLoading) return <LinearProgress />;\n\n  return (\n    <Container className='App'>\n      <CryptoList cryptos={data} />\n    </Container>\n  );\n};\n\nexport default App;\n","/Volumes/ExtendedDrive/IDEWorkspace/VisualStudioCode/utuCodingChallenge/client-app/src/features/CryptoList.tsx",["24"],"import * as React from \"react\";\nimport { CryptoType } from \"../CryptoType\";\nimport {} from \"@material-ui/data-grid\";\nimport {\n  makeStyles,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\ninterface Props {\n  cryptos?: CryptoType[];\n}\n\nconst CryptoList: React.FC<Props> = ({ cryptos }) => {\n  cryptos?.sort((a, b) =>\n    a.marketCap < b.marketCap ? 1 : a.marketCap > b.marketCap ? -1 : 0\n  );\n\n  function numberWithCommas(num: number): string {\n    var num_parts = num.toString().split(\".\");\n    num_parts[0] = num_parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\n    return num_parts.join(\".\");\n  }\n  return (\n    <TableContainer component={Paper}>\n      <Table aria-label='crypto table'>\n        <TableHead>\n          <TableRow>\n            <TableCell>Coin</TableCell>\n            <TableCell align='right'>Price</TableCell>\n            <TableCell align='right'>24h change difference</TableCell>\n            <TableCell align='right'>7d change difference</TableCell>\n            <TableCell align='right'>1 month change difference</TableCell>\n            <TableCell align='right'>Volume</TableCell>\n            <TableCell align='right'>Market Cap</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {cryptos?.map((item) => (\n            <TableRow key={item.id}>\n              <TableCell\n                component='th'\n                scope='row'\n                style={{ fontWeight: \"bold\" }}\n              >\n                {item.currencyName}\n              </TableCell>\n              <TableCell align='right'>\n                ${numberWithCommas(item.price)}\n              </TableCell>\n              <TableCell\n                align='right'\n                style={\n                  item.differenceIn24Hrs < 0\n                    ? { color: \"red\" }\n                    : { color: \"green\" }\n                }\n              >\n                {item.differenceIn24Hrs}%\n              </TableCell>\n              <TableCell\n                align='right'\n                style={\n                  item.differenceIn24Hrs < 0\n                    ? { color: \"red\" }\n                    : { color: \"green\" }\n                }\n              >\n                {item.differenceIn7Days}%\n              </TableCell>\n              <TableCell\n                align='right'\n                style={\n                  item.differenceIn24Hrs < 0\n                    ? { color: \"red\" }\n                    : { color: \"green\" }\n                }\n              >\n                {item.differenceInMonth}%\n              </TableCell>\n              <TableCell align='right'>\n                ${numberWithCommas(item.volume)}\n              </TableCell>\n              <TableCell align='right'>\n                ${numberWithCommas(item.marketCap)}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default CryptoList;\n",{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":12,"column":28,"nodeType":"31","messageId":"32","endLine":12,"endColumn":33},{"ruleId":"29","severity":1,"message":"33","line":5,"column":3,"nodeType":"31","messageId":"32","endLine":5,"endColumn":13},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"@typescript-eslint/no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'makeStyles' is defined but never used.","no-global-assign","no-unsafe-negation"]